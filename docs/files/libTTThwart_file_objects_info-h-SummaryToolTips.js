NDSummary.OnToolTipsLoaded("File:libTTThwart_file_objects_info.h",{71:"<div class=\"NDToolTip TInformation LC\"><div class=\"TTSummary\">Copyright 2019 Razvan Raducu and Ricardo J. Rodriguez</div></div>",23:"<div class=\"NDToolTip TType LC\"><div class=\"TTSummary\">Represents specific metadata of each file used by any of the hooked functions.</div></div>",24:"<div class=\"NDToolTip TType LC\"><div class=\"TTSummary\">Main structure of the whole library. It is a global array containing different file_object_info entries.</div></div>",26:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype26\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span> upsert_file_data_in_array_ext3ext4(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">file_objects_info&nbsp;</td><td class=\"PNamePrefix\">*</td><td class=\"PName last\">array,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PNamePrefix\">*</td><td class=\"PName last\">path,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">ino_t&nbsp;</td><td></td><td class=\"PName last\">inode,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PNamePrefix\">*</td><td class=\"PName last\">tmp_dir</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Implementation of upsert_file_data_in_array for ext3 and ext4 file systems.&nbsp; The main difference is that these filesystems reuse inodes so hardlinks must be created in order to ensure inode consistency.</div></div>",27:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype27\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span> upsert_file_data_in_array_otherfs(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">file_objects_info&nbsp;</td><td class=\"PNamePrefix\">*</td><td class=\"PName last\">array,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PNamePrefix\">*</td><td class=\"PName last\">path,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">ino_t&nbsp;</td><td></td><td class=\"PName last\">inode,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PNamePrefix\">*</td><td class=\"PName last\">tmp_dir</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Implementation of upsert_file_data_in_array for other FS than ext3 and ext4.&nbsp; As far as I am concerned as of right now, there is no need to ensure inode consistency because only ext3 and ext4 reuse them. Last</div></div>",28:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype28\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span> initialize_array(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">file_objects_info&nbsp;</td><td class=\"PNamePrefix\">*</td><td class=\"PName last\">array,</td></tr><tr><td class=\"PType first\">size_t&nbsp;</td><td></td><td class=\"PName last\">size</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Initializes the given file_objects_info array with the given size, allocating the corresponding memory. The allocation is made via &lt;calloc&gt; and the function performs error checking.</div></div>",29:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype29\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span> upsert_nonexisting_file_metadata_in_array(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">file_objects_info&nbsp;</td><td class=\"PNamePrefix\">*</td><td class=\"PName last\">array,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PNamePrefix\">*</td><td class=\"PName last\">path,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">ino_t&nbsp;</td><td></td><td class=\"PName last\">inode</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Inserts into the given array the file_object_info entry with the given path and inode as well as other metadata just like upsert_file_data_in_array_otherfs does. The difference is that the inode will be 0 (zero), the temporal path will be null while device_id and file_mode will get ther default (int) value.</div></div>",30:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype30\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span> free_array(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">file_objects_info&nbsp;</td><td class=\"PNamePrefix\">*</td><td class=\"PName last\">array</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Frees the memory used by the given array. This function is ment to be called at the end of the program, in &lt;after_main&gt; destructor function.</div></div>",31:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype31\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">int</span> find_index_in_array(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">file_objects_info&nbsp;</td><td class=\"PNamePrefix\">*</td><td class=\"PName last\">array,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PNamePrefix\">*</td><td class=\"PName last\">path</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Find the index of the given path in the given array. The first check performed is asserting array size is bigger than 0 (zero) because othwerwise means the array has not yet been initialized, so there is no way the element could be found in it. If array size is bigger than 0 (zero) the search is performed in linear, sequential manner. From the first element to the last.</div></div>",34:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype34\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">file_object_info get_from_array_at_index(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">file_objects_info&nbsp;</td><td class=\"PNamePrefix\">*</td><td class=\"PName last\">array,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td></td><td class=\"PName last\">index</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Retrieves the file_object_info element at the given index in the given array.</div></div>",47:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype47\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span> remove_from_array_at_index(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">file_objects_info&nbsp;</td><td class=\"PNamePrefix\">*</td><td class=\"PName last\">array,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td></td><td class=\"PName last\">index</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Removes the element at index &quot;index&quot; from the array. Please note it\'s index, not position. Indexes start at 0.</div></div>"});