NDSummary.OnToolTipsLoaded("File:libTTThwart_wrappers.h",{9:"<div class=\"NDToolTip TInformation LC\"><div class=\"TTSummary\">Whatever</div></div>",5:"<div class=\"NDToolTip TInformation LC\"><div class=\"TTSummary\">All the wrappers defined here are used for function calls within the library.&nbsp; The use of wrappers is very important because it avoids recursive calls of whatever function. For example, let\'s say there is a need to call open within the library. If the libarary were to call open(), since open() is a hooked function, the call would be recursive. We need to directly call original functions from within the library and we achieve that by using wrappers.</div></div>",4:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype4\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">extern void</span> * dlsym_wrapper(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PName last\">char *</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">The correct way to test for an error is to call dlerror() to clear any old error conditions, then call dlsym(), and then call dlerror() again, saving its return value into a variable, and check whether this saved value is not NULL.&nbsp; Please refer to Linux Programmer\'s Manual (man-pages) official dlsym() docs</div></div>",6:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype6\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">extern int</span> open_wrapper(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PName last\">char *,</td></tr><tr><td class=\"first\"></td><td class=\"PName last\">int,</td></tr><tr><td class=\"first\"></td><td class=\"PName last\">va_list</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">The open wrapper guarantees, insures original_open is initialized.&nbsp; It\'s used by other inner functions in order to avoid open() recursivity and overhead. In adittion, it deals with ellipsis (variable arguments) since open is a variadic function.</div></div>",7:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype7\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">extern int</span> open64_wrapper(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PName last\">char*,</td></tr><tr><td class=\"first\"></td><td class=\"PName last\">int,</td></tr><tr><td class=\"first\"></td><td class=\"PName last\">va_list</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Exactly the same as open_wrapper but for files larger than 2 GiB-1 size.&nbsp; Please refer to Large-file support Linux extensions</div></div>"});